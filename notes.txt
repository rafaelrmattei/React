# NOVO PROJETO COM VITE
npm create vite@latest


# INSTALAR AS DEPENDENCIAS
npm i 


# RODAR O PROJETO
npm run dev


# PACOTE DE ÍCONES PHOSPHOR
npm i phosphor-react    


# PACOTE DE MANIPULAÇÃO DE DATAS
npm i date-fns


# UTILIZANDO ROTAS
npm i react-router-dom

1 - Criar o arquivo de rotas (Router.tsx) dentro de src
import { Routes, Route } from 'react-router-dom'
import { Home } from './pages/Home'
import { History } from './pages/History'
export function Router() {
  return (
    <Routes>
      <Route path="/" element={<Home />} />
      <Route path="/history" element={<History />} />
    </Routes>
  )
}

2 - Dentro de App.tsx importar as rotas, e pra funcionar deve-se importar o BrowserRouter do pacote router-dom e colocar o arquivo de rotas (Router) dentro dele
import { BrowserRouter } from "react-router-dom"
import { Router } from "./Router";
export function App() {
  return (
      <BrowserRouter>
        <Router />
      </BrowserRouter>
  )
}


# UTILIZANDO O COMPONENTE OUTLET
import { Outlet } from "react-router-dom"
<Outlet />
É um espaço para ser inserido um conteúdo. 
Exemplo: ao invés de se repetir o header da aplicação, coloca-se ele dentro da pasta layouts num componente onde o entra o Header e o Outlet (que vai receber o conteúdo que muda entre as páginas) http://localhost/
<Routes>
  <Route path="/" element={<DefaultLayout />}> #Deve-se colocar esse elemento Route englobando as rotas que utilização esse layout
    <Route path="/" element={<Home />} />
    <Route path="/history" element={<History />} />
  </Route>
  <Route path="/admin" element={<AdmintLayout />}> #Exemplo de rotas para admin com outro arquivo de layout http://localhost/admin/products
    <Route path="/products" element={<Products />} />
  </Route>
</Routes>


# FORMS (CONTROLLED/UNCONTROLLED)

1 - Controlled são os formulários feitos usando useState que leem cada movimento feito pelo usuário.
-- O problema é que se forem muito grandes o react precisa reconstruir toda interface e pode ficar lento
-- Para formulários menos é ótimo

2 - Uncontrolled são formulários feitos sem o useState, pegando as informações dos inputs somente no onSubmit por Exemplo
-- Para formulários muito grandes não virarem gargalos

3 - Utilizar a biblioteca React Hook Form que utiliza os dois formatos/melhor dos dois mundos
-- npm i react-hook-form
-- import { useForm } from "react-hook-form"
-- const { register, handleSubmit, watch } = useForm()
-- const task = watch('task') <StartCountdownButton type="submit" disabled={!task}> #O watch serve para pegar o valor em tempo real da variável como se fosse usando o useState
-- <TaskInput
      id="task"
      list="task-suggestions"
      placeholder="Dê um nome para o seu projeto"
      {...register('task')} # Esse se transforma no nome do input
    />
    {...register('minutesAmount', { valueAsNumber: true })} #Pode receber um objeto de parametros para dizer por exemplo que é do tipo number
-- const { register, handleSubmit } = useForm()
  function handleCreateNewCycle() {}
  return (
    <HomeContainer>
      <form onSubmit={handleSubmit(handleCreateNewCycle)} action=""> #O onSubmit recebe a funcção do useForm passando como parametro a função que criamos para lidar com o submit

4 - Utilizar a biblioteca para validar o form (yup, joi, zod) #todas são boas, zod é o que o loirinho gosta pq integra melhor com o TS 
-- npm i zod
-- npm i @hookform/resolvers #Permite integrar react-hook-form com as bibliotecas de validação
-- import { zodResolver } from '@hookform/resolvers/zod'
-- import * as zod from 'zod'
-- Utilizando o zod
    const newCycleFormValidationSchema = zod.object({ #Criar uma constante com as regras do formulário
      task: zod.string().min(1, 'Informe a tarefa'),
      minutesAmount: zod.number().min(5).max(60)
    })

    type NewCycleFormData = zod.infer<typeof newCycleFormValidationSchema>

    export function Home() {
      const { register, handleSubmit, watch } = useForm<NewCycleFormData>({
        resolver: zodResolver(newCycleFormValidationSchema)
      })
-- Resetar o form
export function Home() {
  const { register, handleSubmit, watch, reset } = useForm<NewCycleFormData>({ #Adiciona a função de reset aqui
    resolver: zodResolver(newCycleFormValidationSchema),
    defaultValues: {
      task: '',
      minutesAmount: 0
    }
  })

  const task = watch('task')
  const isSubmitDisabled = !task

  function handleCreateNewCycle(data: NewCycleFormData) {
    console.log(data)
    reset() #Chama a função de reset()
  }


# HOOK USEEFFECT
import { useEffect } from 'react'
-- Executa quando carrega a tela e toda vez que uma váriavel que ele está escutando é alterada.
-- Se quiser executar somente uma vez, não passa o segundo parametro. Ex:
useEffect(() => {
  console.log("Primeira renderização") # Bom para fazer uma chamada de api para mostrar dados em tela e depois não executar mais
  fetch('htts://api.github.com/users/diego3g/repos')
    .then(response => response.json())
    .then(data => {
      setList()
    })
}, []) # O segundo parametro fica vazio
-- Como não usar. Não usar para atualizar um estado. Cuidar para não multiplicar o número de renderizações com useState e useEffect juntos


# PROP DRILLING
-- Quando temos MUITAS propriedades APENAS para comunicação entre componentes
-- Solução: CONTEXT API: Permite compartilharmos informações entre VÁRIOS componentes ao mesmo tempo


# CONTEXT
-- Importar do react import { createContext } from "react"
-- Criar contexto: 
  interface Cycle {
    id: string
    task: string
    minutesAmount: number
    startDate: Date
    interruptedDate?: Date
    finishedDate?: Date
  }
  interface CyclesContextType {
    activeCycle: Cycle | undefined
  }
  export const CyclesContext = createContext({} as CyclesContextType) # Deve-se exportar o contexto
-- Englobar os elementos filhos que vão utilizar as variáveis do contexto com <CyclesContext.Provider value={{ activeCycle }}></CyclesContext.Provider>
-- Para utilizar nos filhos:
  import { useContext } from "react"; # Para usar o contexto
  import { CyclesContext } from "../.."; # Que foi exportado do pai 
  const { activeCycle } = useContext(CyclesContext)
-- Usando o useForm() que é uma biblioteca externa não faz muito sentido passar os campos por contexto
  const newCycleForm = useForm<NewCycleFormData>({ # Foi colocado dentro de uma variável
    resolver: zodResolver(newCycleFormValidationSchema),
    defaultValues: {
      task: '',
      minutesAmount: 0
    }
  })
  const { handleSubmit, watch, reset } = newCycleForm # Depois foi desestruturado e removido o register
  <FormProvider {...newCycleForm}> #Adicionado o form provider fora do NewCycleForm que vem do import { FormProvider, useForm } from "react-hook-form", e foi feito o spread das váriaveis do newCycleForm que foi criada
    <NewCycleForm />
  </FormProvider>
  E dentro do elemento filho: 
  import { useFormContext } from "react-hook-form";
  const { register } = useFormContext()

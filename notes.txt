# NOVO PROJETO COM VITE
npm create vite@latest


# INSTALAR AS DEPENDENCIAS
npm i 


# RODAR O PROJETO
npm run dev


# PACOTE DE ÍCONES PHOSPHOR
npm i phosphor-react    


# PACOTE DE MANIPULAÇÃO DE DATAS
npm i date-fns


# STYLED componentes	
npm i styled-components
npm i @types/styled-components -D # Como não vem com a tipagem, tem que instalar quando usar o Typescript - O -D quer dizer que é só para o ambiente de desenvolvimento


# JSON Server
- Utilizado para simular um servidor com rotas e tudo mais para o ambiente de desenvolvimento
- npm i json-server@0.17.3 -D (-D quer dizer que é só para o ambiente de desenvolvimento) (0.17.3 por que a ultima versão não tem tudo que tem na .17.3)
- Criar um arquivo json do server no root do projeto. Ex: server.json 
- Rodar o "backend": npx json-server server.json -p 3333 -w -d 1000 (-d 1000 adiciona um delay para simular um ambiente real)
- Colocar um atalho para rodar. No packeg.json em scripts: "scripts": { "dev:server": "json-server server.json -p 3333 -w" } # Assim é só rodar npm run dev:server


# Axios
- npm i axios
- Utilizado para subtituir o fetch por que não tem a API mais amigável do mundo
- criar a pasta src/lib para configuração do axios


# UTILIZANDO ROTAS
npm i react-router-dom
0. Olhar a documentação, pq já foi alterado o formato de uso: https://reactrouter.com/start/data/installation #importante

1 - Criar o arquivo de rotas (Router.tsx) dentro de src
import { Routes, Route } from 'react-router-dom'
import { Home } from './pages/Home'
import { History } from './pages/History'
export function Router() {
  return (
    <Routes>
      <Route path="/" element={<Home />} />
      <Route path="/history" element={<History />} />
    </Routes>
  )
}

2 - Dentro de App.tsx importar as rotas, e pra funcionar deve-se importar o BrowserRouter do pacote router-dom e colocar o arquivo de rotas (Router) dentro dele
import { BrowserRouter } from "react-router-dom"
import { Router } from "./Router";
export function App() {
  return (
      <BrowserRouter>
        <Router />
      </BrowserRouter>
  )
}


# UTILIZANDO O COMPONENTE OUTLET
import { Outlet } from "react-router-dom"
<Outlet />
É um espaço para ser inserido um conteúdo. 
Exemplo: ao invés de se repetir o header da aplicação, coloca-se ele dentro da pasta layouts num componente onde o entra o Header e o Outlet (que vai receber o conteúdo que muda entre as páginas) http://localhost/
<Routes>
  <Route path="/" element={<DefaultLayout />}> #Deve-se colocar esse elemento Route englobando as rotas que utilização esse layout
    <Route path="/" element={<Home />} />
    <Route path="/history" element={<History />} />
  </Route>
  <Route path="/admin" element={<AdmintLayout />}> #Exemplo de rotas para admin com outro arquivo de layout http://localhost/admin/products
    <Route path="/products" element={<Products />} />
  </Route>
</Routes>


# FORMS (CONTROLLED/UNCONTROLLED)

1 - Controlled são os formulários feitos usando useState que leem cada movimento feito pelo usuário.
-- O problema é que se forem muito grandes o react precisa reconstruir toda interface e pode ficar lento
-- Para formulários menos é ótimo

2 - Uncontrolled são formulários feitos sem o useState, pegando as informações dos inputs somente no onSubmit por Exemplo
-- Para formulários muito grandes não virarem gargalos

3 - Utilizar a biblioteca React Hook Form que utiliza os dois formatos/melhor dos dois mundos
-- npm i react-hook-form
-- import { useForm } from "react-hook-form"
-- const { register, handleSubmit, watch } = useForm()
-- const task = watch('task') <StartCountdownButton type="submit" disabled={!task}> #O watch serve para pegar o valor em tempo real da variável como se fosse usando o useState
-- <TaskInput
      id="task"
      list="task-suggestions"
      placeholder="Dê um nome para o seu projeto"
      {...register('task')} # Esse se transforma no nome do input
    />
    {...register('minutesAmount', { valueAsNumber: true })} #Pode receber um objeto de parametros para dizer por exemplo que é do tipo number
-- const { register, handleSubmit } = useForm()
  function handleCreateNewCycle() {}
  return (
    <HomeContainer>
      <form onSubmit={handleSubmit(handleCreateNewCycle)} action=""> #O onSubmit recebe a funcção do useForm passando como parametro a função que criamos para lidar com o submit

4 - Utilizar a biblioteca para validar o form (yup, joi, zod) #todas são boas, zod é o que o loirinho gosta pq integra melhor com o TS 
-- npm i zod
-- npm i @hookform/resolvers #Permite integrar react-hook-form com as bibliotecas de validação
-- import { zodResolver } from '@hookform/resolvers/zod'
-- import * as zod from 'zod'
-- Utilizando o zod
    const newCycleFormValidationSchema = zod.object({ #Criar uma constante com as regras do formulário
      task: zod.string().min(1, 'Informe a tarefa'),
      minutesAmount: zod.number().min(5).max(60)
    })

    type NewCycleFormData = zod.infer<typeof newCycleFormValidationSchema>

    export function Home() {
      const { register, handleSubmit, watch } = useForm<NewCycleFormData>({
        resolver: zodResolver(newCycleFormValidationSchema)
      })
-- Resetar o form
export function Home() {
  const { register, handleSubmit, watch, reset } = useForm<NewCycleFormData>({ #Adiciona a função de reset aqui
    resolver: zodResolver(newCycleFormValidationSchema),
    defaultValues: {
      task: '',
      minutesAmount: 0
    }
  })

  const task = watch('task')
  const isSubmitDisabled = !task

  function handleCreateNewCycle(data: NewCycleFormData) {
    console.log(data)
    reset() #Chama a função de reset()
  }


# HOOK USEEFFECT
import { useEffect } from 'react'
-- Executa quando carrega a tela e toda vez que uma váriavel que ele está escutando é alterada.
-- Se quiser executar somente uma vez, não passa o segundo parametro. Ex:
useEffect(() => {
  console.log("Primeira renderização") # Bom para fazer uma chamada de api para mostrar dados em tela e depois não executar mais
  fetch('htts://api.github.com/users/diego3g/repos')
    .then(response => response.json())
    .then(data => {
      setList()
    })
}, []) # O segundo parametro fica vazio
-- Como não usar. Não usar para atualizar um estado. Cuidar para não multiplicar o número de renderizações com useState e useEffect juntos


# PROP DRILLING
-- Quando temos MUITAS propriedades APENAS para comunicação entre componentes
-- Solução: CONTEXT API: Permite compartilharmos informações entre VÁRIOS componentes ao mesmo tempo


# CONTEXT
-- Importar do react import { createContext } from "react"
-- Criar contexto: 
  interface Cycle {
    id: string
    task: string
    minutesAmount: number
    startDate: Date
    interruptedDate?: Date
    finishedDate?: Date
  }
  interface CyclesContextType {
    activeCycle: Cycle | undefined
  }
  export const CyclesContext = createContext({} as CyclesContextType) # Deve-se exportar o contexto
-- Englobar os elementos filhos que vão utilizar as variáveis do contexto com <CyclesContext.Provider value={{ activeCycle }}></CyclesContext.Provider>
-- Para utilizar nos filhos:
  import { useContext } from "react"; # Para usar o contexto
  import { CyclesContext } from "../.."; # Que foi exportado do pai 
  const { activeCycle } = useContext(CyclesContext)
-- Usando o useForm() que é uma biblioteca externa não faz muito sentido passar os campos por contexto
  const newCycleForm = useForm<NewCycleFormData>({ # Foi colocado dentro de uma variável
    resolver: zodResolver(newCycleFormValidationSchema),
    defaultValues: {
      task: '',
      minutesAmount: 0
    }
  })
  const { handleSubmit, watch, reset } = newCycleForm # Depois foi desestruturado e removido o register
  <FormProvider {...newCycleForm}> #Adicionado o form provider fora do NewCycleForm que vem do import { FormProvider, useForm } from "react-hook-form", e foi feito o spread das váriaveis do newCycleForm que foi criada
    <NewCycleForm />
  </FormProvider>
  E dentro do elemento filho: 
  import { useFormContext } from "react-hook-form";
  const { register } = useFormContext()

# USEREDUCER 
-- Usado quando a complexidade da troca de um estado (state) é muito complexa 
Isso: const [cycles, setCycles] = useState<Cycle[]>([])
Vira isso: const [cycles, dispatch] = useReducer((state: Cycle[], action: unknown) => {
    return state
  }, [])


#BIBLIOTECA IMMER
-- npm i immer
-- import { produce } from 'immer'
-- Utilizado no lugar dos maps, para não precisar percorrer um array para fazer uma alteração
--// return {
  //   ...state,
  //   cycles: [...state.cycles, action.payload.newCycle],
  //   activeCycleId: action.payload.newCycle.id
  // }
  return produce(state, draft => {
    draft.cycles.push(action.payload.newCycle)
    draft.activeCycleId = action.payload.newCycle.id
  })

  // return {
  //   ...state,
  //   cycles: state.cycles.map(cycle => {
  //     if (cycle.id === state.activeCycleId) {
  //       return { ...cycle, interruptedDate: new Date() }
  //     } else {
  //       return cycle
  //     }
  //   }),
  //   activeCycleId: null

  // }
  const currentCycleIndex = state.cycles.findIndex(cycle => {
    return cycle.id === state.activeCycleId
  })

  if (currentCycleIndex < 0) {
    return state
  }

  return produce(state, draft => {
    draft.cycles[currentCycleIndex].interruptedDate = new Date() 
    draft.activeCycleId = null
  })


# USE CONTEXT SELECTOR (OTIMIZAÇÃO)
- npm i use-context-selector scheduler
- Utilizada para otilização nos contextos. Para não precisar renderizar todo o contexto, e só o que foi chamado dele.
- import { createContext } from "use-context-selector"; # Altera a chamada do createContext do react para o use-context-selector
- import { useContextSelector } from "use-context-selector"; # Altera a chamada do useCOntext para useContextSelector e adiciona um parametro de função de retorno do que é preciso utilizar
  const createTransaction = useContextSelector(
    TransactionContext,
    (context) => {
      return context.createTransaction;
    }
  );

# USE CALLBACK (OTIMIZAÇÃO)
- Vem do react import { useCallback } from 'react' e serve para evitar que uma função seja recriada se nenhuma informação que aquela função dependa tenha mudado
- Isso: 
  async function createTransaction(data: CreateTransactionInput) {
    const { description, price, category, type } = data;

    const response = await api.post("transactions", {
      description,
      price,
      category,
      type,
      createdAt: new Date(),
    });

    setTransactions((state) => [response.data, ...state]);
  }
  Vira isso:
  const createTransaction = useCallback(
    async (data: CreateTransactionInput) => {
      const { description, price, category, type } = data;

      const response = await api.post("transactions", {
        description,
        price,
        category,
        type,
        createdAt: new Date(),
      });

      setTransactions((state) => [response.data, ...state]);
    },
    [] # Aqui é um array de dependencias que precisa ser adicionados quando a função depende de uma variavel externa
  );

# MEMO (OTIMIZAÇÃO)
 - Utilizando em componentes que tem HTML muito pesado, exemplo: Longas listas.
 - Não utilizar em tudo, porque a comparação dele demora mais tempo do que a comparação normal do react. É somente para locais com HTML realmente pesados.
 - Uso em funções:
 - Isso:
  export function SearchFormComponent() {}
 - Vira isso:
  function SearchFormComponent() {}
  export const SearchForm = memo(SearchFormComponent);
 - Uso em variaveis: #summary só vai recalcular quando transactions mudar
  const summary = useMemo(() => {
    return transactions.reduce(
      (acc, transaction) => {
        if (transaction.type === "income") {
          acc.income += transaction.price;
          acc.total += transaction.price;
        } else {
          acc.outcome += transaction.price;
          acc.total -= transaction.price;
        }

        return acc;
      },
      {
        income: 0,
        outcome: 0,
        total: 0,
      }
    );
  }, [transactions]);
  

# SHADCN/UI (https://ui.shadcn.com)
- Biblioteca de componentes que utiliza tailwind

# ESLINT 
- npm i eslint @rocketseat/eslint-config -D
- Cria-se o arquivo .eslintrc.json e adiciona:
  {
    "extends": ["@rocketseat/eslint-config/react"],
  }

# PRETTIER TAILWIND (https://tailwindcss.com/blog/automatic-class-sorting-with-prettier)
- Organiza a ordem das classes tailwind
- npm install -D prettier prettier-plugin-tailwindcss
- Cria-se o arquivo de configuração .prettierrc e adiciona:
  {
  "plugins": ["prettier-plugin-tailwindcss"]
  }

# PLUGIN REODENAÇÃO DE IMPORTS E EXPORTS/opctional (https://github.com/lydell/eslint-plugin-simple-import-sort)
- Reordena as importações para ficar mais bem padronizado
- npm i -D eslint-plugin-simple-import-sort
- Adiciona ao arquivo .eslintrc.json:
  {
    "extends": ["@rocketseat/eslint-config/react"],
    "plugins": ["simple-import-sort"] # isso aqui
    "rules": { # isso aqui
      "simple-import-sort/imports": "error" # isso aqui
    } # isso aqui
  }
- Adicionar ao settings.json do vscode:
  "editor.formatOnSave": true,
  "editor.formatOnPaste": true,
  "editor.codeActionsOnSave": {
    "source.fixAll": "explicit",
    "source.fixAll.eslint": "explicit"
  },
  "eslint.validate": ["javascript", "typescript", "javascriptreact", "typescriptreact"]


# RECHARTS 
- Biblioteca de charts/gráficos
- npm i recharts


# REACT QUERY
- npm i @tanstack/react-query
  lib/react-query.ts:
  import { QueryClient } from '@tanstack/react-query'
  export const queryClient = new QueryClient()
  App.tsx:
  <QueryClientProvider client={queryClient}>
    <RouterProvider router={router} />
  </QueryClientProvider>


# TESTES
- Vitest: https://vitest.dev
- Testing https://testing-library.com
- Happydom https://github.com/capricorn86/happy-dom
- npm i -D @testing-library/user-event


# MSW
- https://mswjs.io
- npm i msw -D
- Construção de Mocks. 
- Serve para operar a aplicação sem precisar conectar na API.


# PRISMA
- Banco de dados
- npm i prisma -D //CLI do prisma. Para utilizar os comandos do prisma
- npm i @prisma/client //Dependencia para lidar com o banco
- npx prisma init --datasource-provider SQLite // E se quiser trocar de banco não precisa alterar nada de código, só trocar a url de conexão e recriar as migrations
- Criar as models em prisma/schema.prisma
- npx prisma migrate dev //Lê o schema.prisma e ve o que foi alterado, oferece para dar um nome do que foi feito e roda as migrations
- npx prisma studio // Abre uma página para ver o banco de dados
- Criar pasta src/lib/prisma.ts para fazer a conexão com o prisma. Esse arquivo lê o arquivo env e sabe quais são os dados de conexão
# NOOKIE
- Pacote para lidar com cookies
- npm i nookies
- npm i @types/cookie -D //Tipagens para o nookies


# AUTENTICAÇÃO 
- Magic Link - Interessante demais. Só pelo e-mail.
- NEXTAUTH - Foda.. autentica com muita coisa. Mas é bom quando o Back roda no SSR do Next. (https://next-auth.js.org/getting-started/example)
- npm i next-auth
- NextAuth/Adapter = Pra não depender somente da autenticação social e criar algo do nosso lado (https://next-auth.js.org/adapters)
- Como está sendo usado o BD Prisma, deve-se usar a documentação para tal (https://authjs.dev/getting-started/adapters/prisma?_gl=1*1aap0w6*_gcl_au*MTExNzc0OTg1Ni4xNzQ4Mjc1MTc1)


#GOOGLEAPI
- Serve pra poder dar o refresh no token de acesso
- npm i googleapis
- dentro de /lib/google.ts //Cria a função para automatizar o processo de atualização do token


#NEXT SEO
- Para otimização de SEO.
- https://github.com/garmeeh/next-seo
- npm i next-seo
- Segundo a documentação, adiciona o _app.page.tsx o DefaultSeo
- E nas páginas em si o NextSeo


# DESIGN SYSTEM
- Criar pacotes com padrões de design como cores, fontes, e etc para serem usados em diversos projetos

- npm init -y: Cria o package.json
- Alterar o name no package.json
- npm i -D typescript: Instala o typescript
- npx tsc --init: Cria o arquivo de configuração do typescript
- npx tsx: Inicia o projeto transformando os arquivos ts em js
- npm i tsup -D: Faz o processo de conversão do código em um pacote js que vai ser carregado por outras aplicações (melhor que o npx tsx pq abrange mais formatos diferentes)
- No package.json adicionar os scripts: 
  "scripts": {
    "build": "tsup src/index.ts --format esm,cjs --dts",
    "dev": "tsup src/index.ts --format esm,cjs --dts --watch"
  },

- Monorepo: npm init -y dentro da pasta root para unificar os pacotes. (react e tokens por exemplo). Vai criar um package.json global.
- O que vai nesse package.json global:
{
  "private": true,
  "workspaces": [
    "packages/*"
  ]
}

- Para demonstrar que um pacote depende do outro, remover o node_modules dos dois packages, e no package.json de tokens adicionar:
"devDependencies": {
  "@ignite-ui/tokens": "*", #Essa instrução
  "tsup": "^8.4.0",
  "typescript": "^5.8.3"
}
- npm i na pasta root para fazer a instalação do node_modules novamente na raiz
- Daí pode deletar os package-lock.json de dentro dos pacotes pq não vai mais precisar
- Isso é feito pq os pacotes utilizam das mesmas dependencias e não precisam estar instalados nos dois. Um na raiz pra eles já chega
- Informar dentro do package.json de cada pacote onde que ta o index.js. 
"main": "./dist/index.js",
"module": "./dist/index.mjs",
"types": "./dist/index.d.ts",

- Configurar o Typescript que pode ser compartilhavel entre vários pacotes
- Cria pasta ts-config dentro de packages
- npm init -y dentro de ts-config pra criar o package.json
{
  "name": "@ignite-ui/ts-config",
  "version": "1.0.0",
  "license": "MIT",
  "private": true
}
- Criar o  arquivo base.json dentro de ts-config
{
  "compilerOptions": {
    "composite": false,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "node",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true
  },
  "exclude": ["node_modules"]
}
- Criar react.json dentro de ts-config:
{
  "extends": "./base.json",
  "compilerOptions": {
    "jsx": "react-jsx",
    "lib": ["dom", "ES2015"],
    "module": "ESNext",
    "target": "es6"
  }
}
- Dentro dos packages.json dos outros pacotes adicionar nas dependencias:
"devDependencies": {
  "@ignite-ui/ts-config": "*",
}
- Volta pra raiz e npm i
- Dentro de tsconfig.json do pacote tokens e react remover tudo e adicionar:
Tokens:
{
  "extends": "@ignite-ui/ts-config/base.json"
  "include": ["src"]
}
React:
{
  "extends": "@ignite-ui/ts-config/react.json"
  "include": ["src"]
}
- npm i de novo
- entra dentro dos pacotes react e tokens e npm run build

- Configurando o ESLint
- Criar pasta eslint-config dentro de packages
- Acessar a pasta e iniciar com npm init -y para criar o package.json
{
  "name": "@ignite-ui/eslint-config",
  "license": "MIT",
  "private": true,
  "main": "index.js"
}
- Instalar as dependencias: npm i -D eslint @rocketseat/eslint-config
{
  "name": "@ignite-ui/eslint-config",
  "license": "MIT",
  "private": true,
  "main": "index.js",
  "devDependencies": {
    "@rocketseat/eslint-config": "^2.2.2",
    "eslint": "^8.57.1"
  }
}
- Dentro da index.js:
module.exports = {
  extends: ['@rocketseat/eslint-config/react'],
}
- Importar dentro dos outros pacotes esse pacote eslint-config
"devDependencies": {
  "@ignite-ui/eslint-config": "*",
}
- Dentro do pacote react e tokens criar o arquivo .eslintrc.json
{
  "extends": "@ignite-ui/eslint-config"
}
- No arquivo package.json de react e tokens adicionar o script:
"scripts": {
  "lint": "eslint src/**/*.ts* --fix"
},
- Dentro do diretório de react e tokens rodar o comando npm run lint

- Dar vida pro pacote react utilizando os tokens
- Instalar o react dentro do pacote react como uma dependencia de desenvolvimento npm i -D react @types/react @types/react-dom
- No package.json adicionar --external react nos scripts (Isso é pq quem vai usar o pacote já vai ter o react instalado no seu projeto, e não precisa do react do pacote. Por isso tbm foi instalado como -D)
- Trocar também index.ts por index.tsx
"scripts": {
  "build": "tsup src/index.tsx --format esm,cjs --dts --external react",
  "dev": "tsup src/index.tsx --format esm,cjs --dts --external react --watch",
  "lint": "eslint src/**/*.ts* --fix"
},
- Testar: Dentro de react/src/index.tsx:
import { colors } from '@ignite-ui/tokens'
export function App() {
  return <h1 style={{ color: colors.ignite300 }}>Hello World</h1>
}
- Instalando o stitches no pacote react: npm i @stitches/react # Esse não precisa ser só para desenvolvedor

- Storybook: A documentação do Design System
- Criar pasta docs dentro de packages e acessar
- npm init -y
- Instalar: npx sb init --builder @storybook/builder-vite --type react
- Instalar: npm i vite @vitejs/plugin-react -D                        
- Instalar: npm i react react-dom
- Criar arquivo vite.config.js em /docs e dentro:
/// <reference types="vite/client" />
import react from '@vitejs/plugin-react'
import { defineConfig } from 'vite'
export default defineConfig({
  plugins: [react()],
})
- Alterar as informações abaixo do package.json:
"name": "@ignite-ui/docs",
"scripts": {
  "test": "echo \"Error: no test specified\" && exit 1",
  "dev": "storybook dev -p 6006",
  "build": "storybook build"
},
"license": "MIT",
- Remover o node_modules de /docs e root, e dentro de docs rodar npm i
- npm run dev
- Remover a pasta stories de /docs, que são os exemplos.
- Criar a pasta src/stories
- E a partir disso arquivos de história dentro de stories: Button.stories.tsx
- Por ter feito os passos acima deve-se entrar em .storybook/main.js e alterar o caminho:^
"stories": [
  "../src/stories/**/*.mdx", #Adicionado /src
  "../src/stories/**/*.stories.tsx" #Adicionado /src e deixou só arquivos tsx
],
- Adicionar no package.json de /docs:
"dependencies": {
  "@ignite-ui/react": "*",
  "@ignite-ui/tokens": "*",
  "@ignite-ui/eslint-config": "*",
}
- Parar de rodar e dar um npm i
- Criar um arquivo na raiz de /docs .eslintrc.json:
{
  "extends": "@ignite-ui/eslint-config"
}
- Para começar a importar pra dentro do Storybook, tem que abrir a pasta react e deixar rodando o npm run dev pra ir buildando as alterações

- TurboRepo
- Na pasta raiz: npm i turbo@latest -D
- Serve para conseguir executar scripts em todos os pacotes ao mesmo tempo
- Criar arquivo turbo.json na raiz
{
  "$schema": "https://turborepo.org/schema.json",
  "tasks": {
    "dev": {
      "cache": false
    },
    "build": {
      "outputs": ["dist/**", "storybook-static/**"],
      "dependsOn": ["^build"]
    }
  }
}
- No package.json da raiz adicionar o script:
"scripts": {
  "dev": "turbo run dev --parallel",
  "build": "turbo run build"
},

- Instalar pacote de acessibilidade para apontar erros de contraste e outras coisas para deficientes: 
- npm i @storybook/addon-a11y
- Adicionar ao docs/.storybook/main.js: addons: ['@storybook/addon-a11y'],

- Licence dentro dos packages.json troca pra MIT pq é um projeto open source aberto para todo mundo

- Estrutura de pastas: 
- 06-design-system
-- packages\
--- docs\
---- package.json
---- vite.config.ts
--- eslint-config\
---- index.js
---- package.json
--- ts-config\ #pacote de configuração global do ts
---- base.json
---- package.json
---- react.json
--- react\
---- .eslintrc.json
---- src\
----- index.tsx
--- tokens\
---- package.json
---- tsconfig.json
---- .eslintrc.json
---- src\
----- colors.ts #variáveis usando a linguagem mais abrangente possível para atingir qualquer tecnologia que vá importar
----- index.ts #exportando o colors.ts
- package.json
- package-lock.json
- turbo.json

- PUBLICANDO O DESIGN SYSTEM, para utilização publica, utilizando o storybook deployer
- dentro do diretório docs: npm i @storybook/storybook-deployer --save-dev
- criar na raiz o .github/workspaces/deploy-docs.yml com as informações para o deploy
- enviar para o git como pasta raiz que o deploy será feito automaticamente

- CHANGESETS
- Utilizado em pacotes públicos que serão servidos pelo npm para controle de versionamento do monorepo
- na raiz do projeto: npm i @changesets/cli -D
- npx changeset init
- Ele cria uma pasta na raiz .changeset. Dentro dela em config.json
{
  "$schema": "https://unpkg.com/@changesets/config@3.1.1/schema.json",
  "changelog": "@changesets/cli/changelog",
  "commit": false,
  "fixed": [],
  "linked": [],
  "access": "public",
  "baseBranch": "main",
  "updateInternalDependencies": "patch",
  "ignore": ["@ignite-ui/docs"]
}
- no package.json da raiz adicionar os scripts:
{
"changeset": "changeset",
"version-packages": "changeset version",
"release": "turbo run build --filter=packages/docs && changeset publish"
}
- Criar uma conta no npmjs.com e executar npm login no terminal
- criar no npmjs.com uma organization (Tive que alterar todos os packages.json para um nome unico da minha organization rafaelrmattei-ignite-ui)
- rodar na raiz npm run changeset
- rodar npm run version-packages
- rodar npm run release

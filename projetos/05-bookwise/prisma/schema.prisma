generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  rating   Rating[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Book {
  id         String   @id @default(uuid())
  title      String   @unique
  author     String
  coverUrl   String
  summary    String   @db.Text
  totalPages Int
  createdAt  DateTime @default(now())

  categories CategoryOnBook[]
  rating     Rating[]
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  books CategoryOnBook[]
}

model CategoryOnBook {
  bookId     String
  categoryId String

  book     Book     @relation(fields: [bookId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([bookId, categoryId])
}

model Rating {
  id          String   @id @default(uuid())
  userId      String
  bookId      String
  rate        Float
  description String   @db.Text
  createdAt   DateTime @default(now())

  book Book @relation(fields: [bookId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
